# -*- coding: utf-8 -*-
"""forexPredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OeOgP-SJpr6_04An5iFbhO1_EflinwYa
"""

from feature_functions import *
import pandas as pd
import plotly as py
from plotly import tools
import plotly.graph_objs as go

df = pd.read_csv('EURUSDHR.csv')
##Data cleaning
df.columns = ['date', 'open', 'high', 'low', 'close', 'volume']#rename columns

df.date = pd.to_datetime(df.date, format='%d.%m.%Y %H:%M:%S.%f')##Change format of date and time
df = df.set_index(df.date)#Sets a new date column as index

df = df[['open', 'high', 'low', 'close', 'volume']] #removes date column from dataset to remain with index
#column only

df = df.drop_duplicates(keep=False) ##Drops inactive hours from dataset
##data is clean
df = df.iloc[:200]

#print(df.head)

##Get fn data from selected function
#HAresults = heikenashi(df, [1])
#HA = HAresults.candles[1] ##Dataframe from candles
#detrended = detrender(df)
#f = sine(df, [10,15])
#wadl = wadl(df,[15])
#line = wadl.wadl[15]
#resampled = OHLCresample(df,'15H')
#resampled.index = resampled.index.droplevel(0)
#m = momentum(df, [10])
#res = m.close[10]
#s = stochastic(df, [14,15])
#res = s.close[14]
#w = williams(df, [15])
#res = w.close[15]
#p = proc(df, [30])
#res = p.proc[30]
#AD = adosc(df, [30])
#res = AD.AD[30]
#mac = macd(df, [15,30])
#res = mac.signal
#c = cci(df, [30])
#res = c.cci[30]
#bb = bollinger(df, [20], 2)
#res = bb.bands[20]
#pa = price_averages(df, [20])
#res = pa.avs[20]
sl = slopes(df, [20])
res = sl.slope[20]

##Plot the data
ma = df.close.rolling(center=False, window=30).mean()

trace0 = go.Ohlc(x=df.index, open=df.open, high=df.high, low=df.low, close=df.close, name='Currency Quote')
trace1 = go.Scatter(x=df.index, y=ma)
#trace_heikenashi = go.Ohlc(x=HA.index, open=HA.open, high=HA.high, low=HA.low, close=HA.close, name='Heiken Ashi')
#trace_detrended = go.Scatter(x=df.index, y=detrended)
#trace_wadl = go.Scatter(x=line.index, y=line.close)
#trace_mom = go.Scatter(x=res.index, y=res.close)
#trace_stoc = go.Scatter(x=res.index, y=res.K)
#trace_will = go.Scatter(x=res.index, y=res.R)
#trace_proc = go.Scatter(x=res.index, y=res.close)
#trace_adosc = go.Scatter(x=res.index, y=res.AD)
#trace_macd = go.Scatter(x=res.index, y=res.SL)
#trace_cci = go.Scatter(x=res.index, y=res.close)
#trace_bollinger = go.Scatter(x=res.index, y=res.upper)
#trace_avs = go.Scatter(x=res.index, y=res.close)
trace_test = go.Scatter(x=res.index, y=res.high)

#plotly data to plot
data = [trace0, trace1, trace_test]

fig = tools.make_subplots(rows=2, cols=1, shared_xaxes=True)
fig.append_trace(trace0, 1, 1)
fig.append_trace(trace1, 1, 1)
fig.append_trace(trace_test, 2, 1)

py.offline.plot(fig, filename='plot.html')